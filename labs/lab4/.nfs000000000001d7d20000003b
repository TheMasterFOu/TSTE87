-- Timing controller generated from the DSP toolbox
-- Electronics Systems, http://www.es.isy.liu.se/

library ieee;
use ieee.std_logic_1164.all;

entity timingcontroller is
port(
clk, reset : in std_logic;
state : inout integer range 0 to 47);
state : inout integer range 0 to 0);
state : inout integer range 0 to 10);
state : inout integer range 0 to 10);
state : inout integer range 0 to 10);
state : inout integer range 0 to 10);
state : inout integer range 0 to 10);
state : inout integer range 0 to 10);
state : inout integer range 0 to 10);
state : inout integer range 0 to 10);
state : inout integer range 0 to 10);
state : inout integer range 0 to 1);
state : inout integer range 0 to 1);
state : inout integer range 0 to 10);
state : inout integer range 0 to 10);
state : inout integer range 0 to 10);
state : inout integer range 0 to 10);
state : inout integer range 0 to 10);
state : inout integer range 0 to 10);
state : inout integer range 0 to 10);
state : inout integer range 0 to 10);
state : inout integer range 0 to 10);
state : inout integer range 0 to 1);
state : inout integer range 0 to 10);
state : inout integer range 0 to 10);
state : inout integer range 0 to 10);
state : inout integer range 0 to 10);
state : inout integer range 0 to 1);
state : inout integer range 0 to 1);
state : inout integer range 0 to 0);
state : inout integer range 0 to 0);
state : inout integer range 0 to 2);
state : inout integer range 0 to 4);
state : inout integer range 0 to 6);
state : inout integer range 0 to 7);
state : inout integer range 0 to 9);
state : inout integer range 0 to 12);
state : inout integer range 0 to 14);
state : inout integer range 0 to 15);
state : inout integer range 0 to 1);
state : inout integer range 0 to 3);
state : inout integer range 0 to 1);
state : inout integer range 0 to 3);
state : inout integer range 0 to 8);
state : inout integer range 0 to 10);
state : inout integer range 0 to 13);
state : inout integer range 0 to 16);
state : inout integer range 0 to 17);
state : inout integer range 0 to 19);
state : inout integer range 0 to 20);
state : inout integer range 0 to 0);
state : inout integer range 0 to 5);
state : inout integer range 0 to 11);
state : inout integer range 0 to 18);
state : inout integer range 0 to 21);
state : inout integer range 0 to 2);
state : inout integer range 0 to NaN);
state : inout integer range 0 to 0);
state : inout integer range 0 to 0);
state : inout integer range 0 to 31);
state : inout integer range 0 to 51);
state : inout integer range 0 to 71);
state : inout integer range 0 to 4);
state : inout integer range 0 to 4);
state : inout integer range 0 to 63);
state : inout integer range 0 to 27);
state : inout integer range 0 to 63);
state : inout integer range 0 to 49);
state : inout integer range 0 to 54);
state : inout integer range 0 to 1);
state : inout integer range 0 to 2);
state : inout integer range 0 to 14);
state : inout integer range 0 to 16);
state : inout integer range 0 to 24);
state : inout integer range 0 to 35);
state : inout integer range 0 to 15);
state : inout integer range 0 to 42);
state : inout integer range 0 to 15);
state : inout integer range 0 to 48);
state : inout integer range 0 to 3);
state : inout integer range 0 to 17);
state : inout integer range 0 to 38);
state : inout integer range 0 to 45);
state : inout integer range 0 to 53);
state : inout integer range 0 to NaN);
state : inout integer range 0 to NaN);
state : inout integer range 0 to 10);
state : inout integer range 0 to 20);
state : inout integer range 0 to 40);
state : inout integer range 0 to 60);
state : inout integer range 0 to 64);
state : inout integer range 0 to 55);
state : inout integer range 0 to 39);
state : inout integer range 0 to 44);
state : inout integer range 0 to 46);
state : inout integer range 0 to NaN);
state : inout integer range 0 to NaN);
state : inout integer range 0 to 21);
state : inout integer range 0 to 41);
state : inout integer range 0 to 66);
state : inout integer range 0 to 57);
state : inout integer range 0 to 43);
state : inout integer range 0 to 47);
state : inout integer range 0 to 22);
state : inout integer range 0 to 28);
state : inout integer range 0 to 33);
state : inout integer range 0 to NaN);
state : inout integer range 0 to 61);
state : inout integer range 0 to 59);
state : inout integer range 0 to 25);
state : inout integer range 0 to 36);
state : inout integer range 0 to NaN);
state : inout integer range 0 to NaN);
state : inout integer range 0 to NaN);
state : inout integer range 0 to 1);
state : inout integer range 0 to 31);
state : inout integer range 0 to 51);
state : inout integer range 0 to 71);
state : inout integer range 0 to 14);
state : inout integer range 0 to 16);
state : inout integer range 0 to 24);
state : inout integer range 0 to 48);
state : inout integer range 0 to 35);
state : inout integer range 0 to NaN);
state : inout integer range 0 to NaN);
state : inout integer range 0 to 2);
state : inout integer range 0 to 3);
state : inout integer range 0 to 15);
state : inout integer range 0 to 17);
state : inout integer range 0 to 27);
state : inout integer range 0 to 49);
state : inout integer range 0 to 38);
state : inout integer range 0 to 53);
state : inout integer range 0 to 45);
state : inout integer range 0 to NaN);
state : inout integer range 0 to 4);
state : inout integer range 0 to 63);
state : inout integer range 0 to 42);
state : inout integer range 0 to 54);
state : inout integer range 0 to NaN);
state : inout integer range 0 to NaN);
state : inout integer range 0 to NaN);
state : inout integer range 0 to 10);
state : inout integer range 0 to 21);
state : inout integer range 0 to 41);
state : inout integer range 0 to 61);
state : inout integer range 0 to 64);
state : inout integer range 0 to 55);
state : inout integer range 0 to 22);
state : inout integer range 0 to 28);
state : inout integer range 0 to 33);
state : inout integer range 0 to NaN);
state : inout integer range 0 to NaN);
state : inout integer range 0 to 20);
state : inout integer range 0 to 40);
state : inout integer range 0 to 66);
state : inout integer range 0 to 57);
state : inout integer range 0 to 25);
state : inout integer range 0 to 36);
state : inout integer range 0 to 39);
state : inout integer range 0 to 44);
state : inout integer range 0 to 46);
state : inout integer range 0 to NaN);
state : inout integer range 0 to 60);
state : inout integer range 0 to 59);
state : inout integer range 0 to 43);
state : inout integer range 0 to 47);
state : inout integer range 0 to NaN);
state : inout integer range 0 to NaN);
state : inout integer range 0 to NaN);
state : inout integer range 0 to -5.427000e-01);
state : inout integer range 0 to -1.569500e+00);
state : inout integer range 0 to -1.095200e+00);
state : inout integer range 0 to -5.510000e-01);
state : inout integer range 0 to -1.242429e+00);
state : inout integer range 0 to -1.068129e+00);
state : inout integer range 0 to -1.068129e+00);
state : inout integer range 0 to -1.888980e+00);
state : inout integer range 0 to -1.242429e+00);
state : inout integer range 0 to NaN);
state : inout integer range 0 to NaN);
state : inout integer range 0 to -1.209800e+00);
state : inout integer range 0 to -1.212300e+00);
state : inout integer range 0 to -1.678715e+00);
state : inout integer range 0 to -1.461024e+00);
state : inout integer range 0 to -1.461024e+00);
state : inout integer range 0 to -1.678715e+00);
state : inout integer range 0 to -1.068129e+00);
state : inout integer range 0 to -1.888980e+00);
state : inout integer range 0 to -1.242429e+00);
state : inout integer range 0 to NaN);
state : inout integer range 0 to -1.225800e+00);
state : inout integer range 0 to -1.888980e+00);
state : inout integer range 0 to -1.461024e+00);
state : inout integer range 0 to -1.678715e+00);
state : inout integer range 0 to NaN);
state : inout integer range 0 to NaN);
state : inout integer range 0 to NaN);
state : inout integer range 0 to 2);
state : inout integer range 0 to 2);
state : inout integer range 0 to 2);
state : inout integer range 0 to 2);
state : inout integer range 0 to 2);
state : inout integer range 0 to 2);
state : inout integer range 0 to 2);
state : inout integer range 0 to 2);
state : inout integer range 0 to 2);
state : inout integer range 0 to NaN);
state : inout integer range 0 to NaN);
state : inout integer range 0 to 2);
state : inout integer range 0 to 2);
state : inout integer range 0 to 2);
state : inout integer range 0 to 2);
state : inout integer range 0 to 2);
state : inout integer range 0 to 2);
state : inout integer range 0 to 2);
state : inout integer range 0 to 2);
state : inout integer range 0 to 2);
state : inout integer range 0 to NaN);
state : inout integer range 0 to 2);
state : inout integer range 0 to 2);
state : inout integer range 0 to 2);
state : inout integer range 0 to 2);
state : inout integer range 0 to NaN);
state : inout integer range 0 to NaN);
state : inout integer range 0 to -1);
state : inout integer range 0 to -1);
state : inout integer range 0 to -1);
state : inout integer range 0 to -1);
state : inout integer range 0 to -1);
state : inout integer range 0 to -1);
state : inout integer range 0 to -1);
state : inout integer range 0 to -1);
state : inout integer range 0 to -1);
state : inout integer range 0 to -1);
state : inout integer range 0 to -1);
state : inout integer range 0 to -1);
state : inout integer range 0 to -1);
state : inout integer range 0 to -1);
state : inout integer range 0 to -1);
state : inout integer range 0 to -1);
state : inout integer range 0 to -1);
state : inout integer range 0 to -1);
state : inout integer range 0 to -1);
state : inout integer range 0 to -1);
state : inout integer range 0 to -1);
state : inout integer range 0 to -1);
state : inout integer range 0 to -1);
state : inout integer range 0 to -1);
state : inout integer range 0 to -1);
state : inout integer range 0 to -1);
state : inout integer range 0 to -1);
state : inout integer range 0 to NaN);
state : inout integer range 0 to NaN);
state : inout integer range 0 to -1);
state : inout integer range 0 to -1);
state : inout integer range 0 to 0);
state : inout integer range 0 to -1);
state : inout integer range 0 to -1);
state : inout integer range 0 to -1);
state : inout integer range 0 to -1);
state : inout integer range 0 to -1);
state : inout integer range 0 to -1);
state : inout integer range 0 to NaN);
state : inout integer range 0 to NaN);
state : inout integer range 0 to -1);
state : inout integer range 0 to -1);
state : inout integer range 0 to -1);
state : inout integer range 0 to -1);
state : inout integer range 0 to -1);
state : inout integer range 0 to -1);
state : inout integer range 0 to -1);
state : inout integer range 0 to -1);
state : inout integer range 0 to -1);
state : inout integer range 0 to NaN);
state : inout integer range 0 to -1);
state : inout integer range 0 to -1);
state : inout integer range 0 to -1);
state : inout integer range 0 to -1);
state : inout integer range 0 to NaN);
state : inout integer range 0 to NaN);
state : inout integer range 0 to 1);
state : inout integer range 0 to 1);
state : inout integer range 0 to 3);
state : inout integer range 0 to 21);
state : inout integer range 0 to -1);
state : inout integer range 0 to 43);
state : inout integer range 0 to 39);
state : inout integer range 0 to 45);
state : inout integer range 0 to 37);
state : inout integer range 0 to 41);
state : inout integer range 0 to 26);
state : inout integer range 0 to 46);
state : inout integer range 0 to 19);
state : inout integer range 0 to 5);
state : inout integer range 0 to 35);
state : inout integer range 0 to 7);
state : inout integer range 0 to 17);
state : inout integer range 0 to 11);
state : inout integer range 0 to 15);
state : inout integer range 0 to 13);
state : inout integer range 0 to 9);
state : inout integer range 0 to 4);
state : inout integer range 0 to 23);
state : inout integer range 0 to 25);
state : inout integer range 0 to 33);
state : inout integer range 0 to 31);
state : inout integer range 0 to 28);
state : inout integer range 0 to NaN);
state : inout integer range 0 to -1);
state : inout integer range 0 to 14);
state : inout integer range 0 to 14);
state : inout integer range 0 to 14);
state : inout integer range 0 to 14);
state : inout integer range 0 to 14);
state : inout integer range 0 to 14);
state : inout integer range 0 to 14);
state : inout integer range 0 to 14);
state : inout integer range 0 to 14);
state : inout integer range 0 to -1);
state : inout integer range 0 to -1);
state : inout integer range 0 to 14);
state : inout integer range 0 to 14);
state : inout integer range 0 to 14);
state : inout integer range 0 to 14);
state : inout integer range 0 to 14);
state : inout integer range 0 to 14);
state : inout integer range 0 to 14);
state : inout integer range 0 to 14);
state : inout integer range 0 to 14);
state : inout integer range 0 to -1);
state : inout integer range 0 to 14);
state : inout integer range 0 to 14);
state : inout integer range 0 to 14);
state : inout integer range 0 to 14);
state : inout integer range 0 to -1);
state : inout integer range 0 to NaN);
state : inout integer range 0 to -1);
state : inout integer range 0 to 7);
state : inout integer range 0 to 7);
state : inout integer range 0 to 7);
state : inout integer range 0 to 7);
state : inout integer range 0 to 7);
state : inout integer range 0 to 7);
state : inout integer range 0 to 7);
state : inout integer range 0 to 7);
state : inout integer range 0 to 7);
state : inout integer range 0 to -1);
state : inout integer range 0 to -1);
state : inout integer range 0 to 7);
state : inout integer range 0 to 7);
state : inout integer range 0 to 7);
state : inout integer range 0 to 7);
state : inout integer range 0 to 7);
state : inout integer range 0 to 7);
state : inout integer range 0 to 7);
state : inout integer range 0 to 7);
state : inout integer range 0 to 7);
state : inout integer range 0 to -1);
state : inout integer range 0 to 7);
state : inout integer range 0 to 7);
state : inout integer range 0 to 7);
state : inout integer range 0 to 7);
state : inout integer range 0 to -1);
end timingcontroller;

architecture generated of timingcontroller is
begin
process(clk, reset)
begin
if reset = '1' then 
 state <= 0; 
elsif rising_edge(clk) then
 if state = 47 then
elsif rising_edge(clk) then
 if state = 0 then
elsif rising_edge(clk) then
 if state = 10 then
elsif rising_edge(clk) then
 if state = 10 then
elsif rising_edge(clk) then
 if state = 10 then
elsif rising_edge(clk) then
 if state = 10 then
elsif rising_edge(clk) then
 if state = 10 then
elsif rising_edge(clk) then
 if state = 10 then
elsif rising_edge(clk) then
 if state = 10 then
elsif rising_edge(clk) then
 if state = 10 then
elsif rising_edge(clk) then
 if state = 10 then
elsif rising_edge(clk) then
 if state = 1 then
elsif rising_edge(clk) then
 if state = 1 then
elsif rising_edge(clk) then
 if state = 10 then
elsif rising_edge(clk) then
 if state = 10 then
elsif rising_edge(clk) then
 if state = 10 then
elsif rising_edge(clk) then
 if state = 10 then
elsif rising_edge(clk) then
 if state = 10 then
elsif rising_edge(clk) then
 if state = 10 then
elsif rising_edge(clk) then
 if state = 10 then
elsif rising_edge(clk) then
 if state = 10 then
elsif rising_edge(clk) then
 if state = 10 then
elsif rising_edge(clk) then
 if state = 1 then
elsif rising_edge(clk) then
 if state = 10 then
elsif rising_edge(clk) then
 if state = 10 then
elsif rising_edge(clk) then
 if state = 10 then
elsif rising_edge(clk) then
 if state = 10 then
elsif rising_edge(clk) then
 if state = 1 then
elsif rising_edge(clk) then
 if state = 1 then
elsif rising_edge(clk) then
 if state = 0 then
elsif rising_edge(clk) then
 if state = 0 then
elsif rising_edge(clk) then
 if state = 2 then
elsif rising_edge(clk) then
 if state = 4 then
elsif rising_edge(clk) then
 if state = 6 then
elsif rising_edge(clk) then
 if state = 7 then
elsif rising_edge(clk) then
 if state = 9 then
elsif rising_edge(clk) then
 if state = 12 then
elsif rising_edge(clk) then
 if state = 14 then
elsif rising_edge(clk) then
 if state = 15 then
elsif rising_edge(clk) then
 if state = 1 then
elsif rising_edge(clk) then
 if state = 3 then
elsif rising_edge(clk) then
 if state = 1 then
elsif rising_edge(clk) then
 if state = 3 then
elsif rising_edge(clk) then
 if state = 8 then
elsif rising_edge(clk) then
 if state = 10 then
elsif rising_edge(clk) then
 if state = 13 then
elsif rising_edge(clk) then
 if state = 16 then
elsif rising_edge(clk) then
 if state = 17 then
elsif rising_edge(clk) then
 if state = 19 then
elsif rising_edge(clk) then
 if state = 20 then
elsif rising_edge(clk) then
 if state = 0 then
elsif rising_edge(clk) then
 if state = 5 then
elsif rising_edge(clk) then
 if state = 11 then
elsif rising_edge(clk) then
 if state = 18 then
elsif rising_edge(clk) then
 if state = 21 then
elsif rising_edge(clk) then
 if state = 2 then
elsif rising_edge(clk) then
 if state = NaN then
elsif rising_edge(clk) then
 if state = 0 then
elsif rising_edge(clk) then
 if state = 0 then
elsif rising_edge(clk) then
 if state = 31 then
elsif rising_edge(clk) then
 if state = 51 then
elsif rising_edge(clk) then
 if state = 71 then
elsif rising_edge(clk) then
 if state = 4 then
elsif rising_edge(clk) then
 if state = 4 then
elsif rising_edge(clk) then
 if state = 63 then
elsif rising_edge(clk) then
 if state = 27 then
elsif rising_edge(clk) then
 if state = 63 then
elsif rising_edge(clk) then
 if state = 49 then
elsif rising_edge(clk) then
 if state = 54 then
elsif rising_edge(clk) then
 if state = 1 then
elsif rising_edge(clk) then
 if state = 2 then
elsif rising_edge(clk) then
 if state = 14 then
elsif rising_edge(clk) then
 if state = 16 then
elsif rising_edge(clk) then
 if state = 24 then
elsif rising_edge(clk) then
 if state = 35 then
elsif rising_edge(clk) then
 if state = 15 then
elsif rising_edge(clk) then
 if state = 42 then
elsif rising_edge(clk) then
 if state = 15 then
elsif rising_edge(clk) then
 if state = 48 then
elsif rising_edge(clk) then
 if state = 3 then
elsif rising_edge(clk) then
 if state = 17 then
elsif rising_edge(clk) then
 if state = 38 then
elsif rising_edge(clk) then
 if state = 45 then
elsif rising_edge(clk) then
 if state = 53 then
elsif rising_edge(clk) then
 if state = NaN then
elsif rising_edge(clk) then
 if state = NaN then
elsif rising_edge(clk) then
 if state = 10 then
elsif rising_edge(clk) then
 if state = 20 then
elsif rising_edge(clk) then
 if state = 40 then
elsif rising_edge(clk) then
 if state = 60 then
elsif rising_edge(clk) then
 if state = 64 then
elsif rising_edge(clk) then
 if state = 55 then
elsif rising_edge(clk) then
 if state = 39 then
elsif rising_edge(clk) then
 if state = 44 then
elsif rising_edge(clk) then
 if state = 46 then
elsif rising_edge(clk) then
 if state = NaN then
elsif rising_edge(clk) then
 if state = NaN then
elsif rising_edge(clk) then
 if state = 21 then
elsif rising_edge(clk) then
 if state = 41 then
elsif rising_edge(clk) then
 if state = 66 then
elsif rising_edge(clk) then
 if state = 57 then
elsif rising_edge(clk) then
 if state = 43 then
elsif rising_edge(clk) then
 if state = 47 then
elsif rising_edge(clk) then
 if state = 22 then
elsif rising_edge(clk) then
 if state = 28 then
elsif rising_edge(clk) then
 if state = 33 then
elsif rising_edge(clk) then
 if state = NaN then
elsif rising_edge(clk) then
 if state = 61 then
elsif rising_edge(clk) then
 if state = 59 then
elsif rising_edge(clk) then
 if state = 25 then
elsif rising_edge(clk) then
 if state = 36 then
elsif rising_edge(clk) then
 if state = NaN then
elsif rising_edge(clk) then
 if state = NaN then
elsif rising_edge(clk) then
 if state = NaN then
elsif rising_edge(clk) then
 if state = 1 then
elsif rising_edge(clk) then
 if state = 31 then
elsif rising_edge(clk) then
 if state = 51 then
elsif rising_edge(clk) then
 if state = 71 then
elsif rising_edge(clk) then
 if state = 14 then
elsif rising_edge(clk) then
 if state = 16 then
elsif rising_edge(clk) then
 if state = 24 then
elsif rising_edge(clk) then
 if state = 48 then
elsif rising_edge(clk) then
 if state = 35 then
elsif rising_edge(clk) then
 if state = NaN then
elsif rising_edge(clk) then
 if state = NaN then
elsif rising_edge(clk) then
 if state = 2 then
elsif rising_edge(clk) then
 if state = 3 then
elsif rising_edge(clk) then
 if state = 15 then
elsif rising_edge(clk) then
 if state = 17 then
elsif rising_edge(clk) then
 if state = 27 then
elsif rising_edge(clk) then
 if state = 49 then
elsif rising_edge(clk) then
 if state = 38 then
elsif rising_edge(clk) then
 if state = 53 then
elsif rising_edge(clk) then
 if state = 45 then
elsif rising_edge(clk) then
 if state = NaN then
elsif rising_edge(clk) then
 if state = 4 then
elsif rising_edge(clk) then
 if state = 63 then
elsif rising_edge(clk) then
 if state = 42 then
elsif rising_edge(clk) then
 if state = 54 then
elsif rising_edge(clk) then
 if state = NaN then
elsif rising_edge(clk) then
 if state = NaN then
elsif rising_edge(clk) then
 if state = NaN then
elsif rising_edge(clk) then
 if state = 10 then
elsif rising_edge(clk) then
 if state = 21 then
elsif rising_edge(clk) then
 if state = 41 then
elsif rising_edge(clk) then
 if state = 61 then
elsif rising_edge(clk) then
 if state = 64 then
elsif rising_edge(clk) then
 if state = 55 then
elsif rising_edge(clk) then
 if state = 22 then
elsif rising_edge(clk) then
 if state = 28 then
elsif rising_edge(clk) then
 if state = 33 then
elsif rising_edge(clk) then
 if state = NaN then
elsif rising_edge(clk) then
 if state = NaN then
elsif rising_edge(clk) then
 if state = 20 then
elsif rising_edge(clk) then
 if state = 40 then
elsif rising_edge(clk) then
 if state = 66 then
elsif rising_edge(clk) then
 if state = 57 then
elsif rising_edge(clk) then
 if state = 25 then
elsif rising_edge(clk) then
 if state = 36 then
elsif rising_edge(clk) then
 if state = 39 then
elsif rising_edge(clk) then
 if state = 44 then
elsif rising_edge(clk) then
 if state = 46 then
elsif rising_edge(clk) then
 if state = NaN then
elsif rising_edge(clk) then
 if state = 60 then
elsif rising_edge(clk) then
 if state = 59 then
elsif rising_edge(clk) then
 if state = 43 then
elsif rising_edge(clk) then
 if state = 47 then
elsif rising_edge(clk) then
 if state = NaN then
elsif rising_edge(clk) then
 if state = NaN then
elsif rising_edge(clk) then
 if state = NaN then
elsif rising_edge(clk) then
 if state = -5.427000e-01 then
elsif rising_edge(clk) then
 if state = -1.569500e+00 then
elsif rising_edge(clk) then
 if state = -1.095200e+00 then
elsif rising_edge(clk) then
 if state = -5.510000e-01 then
elsif rising_edge(clk) then
 if state = -1.242429e+00 then
elsif rising_edge(clk) then
 if state = -1.068129e+00 then
elsif rising_edge(clk) then
 if state = -1.068129e+00 then
elsif rising_edge(clk) then
 if state = -1.888980e+00 then
elsif rising_edge(clk) then
 if state = -1.242429e+00 then
elsif rising_edge(clk) then
 if state = NaN then
elsif rising_edge(clk) then
 if state = NaN then
elsif rising_edge(clk) then
 if state = -1.209800e+00 then
elsif rising_edge(clk) then
 if state = -1.212300e+00 then
elsif rising_edge(clk) then
 if state = -1.678715e+00 then
elsif rising_edge(clk) then
 if state = -1.461024e+00 then
elsif rising_edge(clk) then
 if state = -1.461024e+00 then
elsif rising_edge(clk) then
 if state = -1.678715e+00 then
elsif rising_edge(clk) then
 if state = -1.068129e+00 then
elsif rising_edge(clk) then
 if state = -1.888980e+00 then
elsif rising_edge(clk) then
 if state = -1.242429e+00 then
elsif rising_edge(clk) then
 if state = NaN then
elsif rising_edge(clk) then
 if state = -1.225800e+00 then
elsif rising_edge(clk) then
 if state = -1.888980e+00 then
elsif rising_edge(clk) then
 if state = -1.461024e+00 then
elsif rising_edge(clk) then
 if state = -1.678715e+00 then
elsif rising_edge(clk) then
 if state = NaN then
elsif rising_edge(clk) then
 if state = NaN then
elsif rising_edge(clk) then
 if state = NaN then
elsif rising_edge(clk) then
 if state = 2 then
elsif rising_edge(clk) then
 if state = 2 then
elsif rising_edge(clk) then
 if state = 2 then
elsif rising_edge(clk) then
 if state = 2 then
elsif rising_edge(clk) then
 if state = 2 then
elsif rising_edge(clk) then
 if state = 2 then
elsif rising_edge(clk) then
 if state = 2 then
elsif rising_edge(clk) then
 if state = 2 then
elsif rising_edge(clk) then
 if state = 2 then
elsif rising_edge(clk) then
 if state = NaN then
elsif rising_edge(clk) then
 if state = NaN then
elsif rising_edge(clk) then
 if state = 2 then
elsif rising_edge(clk) then
 if state = 2 then
elsif rising_edge(clk) then
 if state = 2 then
elsif rising_edge(clk) then
 if state = 2 then
elsif rising_edge(clk) then
 if state = 2 then
elsif rising_edge(clk) then
 if state = 2 then
elsif rising_edge(clk) then
 if state = 2 then
elsif rising_edge(clk) then
 if state = 2 then
elsif rising_edge(clk) then
 if state = 2 then
elsif rising_edge(clk) then
 if state = NaN then
elsif rising_edge(clk) then
 if state = 2 then
elsif rising_edge(clk) then
 if state = 2 then
elsif rising_edge(clk) then
 if state = 2 then
elsif rising_edge(clk) then
 if state = 2 then
elsif rising_edge(clk) then
 if state = NaN then
elsif rising_edge(clk) then
 if state = NaN then
elsif rising_edge(clk) then
 if state = -1 then
elsif rising_edge(clk) then
 if state = -1 then
elsif rising_edge(clk) then
 if state = -1 then
elsif rising_edge(clk) then
 if state = -1 then
elsif rising_edge(clk) then
 if state = -1 then
elsif rising_edge(clk) then
 if state = -1 then
elsif rising_edge(clk) then
 if state = -1 then
elsif rising_edge(clk) then
 if state = -1 then
elsif rising_edge(clk) then
 if state = -1 then
elsif rising_edge(clk) then
 if state = -1 then
elsif rising_edge(clk) then
 if state = -1 then
elsif rising_edge(clk) then
 if state = -1 then
elsif rising_edge(clk) then
 if state = -1 then
elsif rising_edge(clk) then
 if state = -1 then
elsif rising_edge(clk) then
 if state = -1 then
elsif rising_edge(clk) then
 if state = -1 then
elsif rising_edge(clk) then
 if state = -1 then
elsif rising_edge(clk) then
 if state = -1 then
elsif rising_edge(clk) then
 if state = -1 then
elsif rising_edge(clk) then
 if state = -1 then
elsif rising_edge(clk) then
 if state = -1 then
elsif rising_edge(clk) then
 if state = -1 then
elsif rising_edge(clk) then
 if state = -1 then
elsif rising_edge(clk) then
 if state = -1 then
elsif rising_edge(clk) then
 if state = -1 then
elsif rising_edge(clk) then
 if state = -1 then
elsif rising_edge(clk) then
 if state = -1 then
elsif rising_edge(clk) then
 if state = NaN then
elsif rising_edge(clk) then
 if state = NaN then
elsif rising_edge(clk) then
 if state = -1 then
elsif rising_edge(clk) then
 if state = -1 then
elsif rising_edge(clk) then
 if state = 0 then
elsif rising_edge(clk) then
 if state = -1 then
elsif rising_edge(clk) then
 if state = -1 then
elsif rising_edge(clk) then
 if state = -1 then
elsif rising_edge(clk) then
 if state = -1 then
elsif rising_edge(clk) then
 if state = -1 then
elsif rising_edge(clk) then
 if state = -1 then
elsif rising_edge(clk) then
 if state = NaN then
elsif rising_edge(clk) then
 if state = NaN then
elsif rising_edge(clk) then
 if state = -1 then
elsif rising_edge(clk) then
 if state = -1 then
elsif rising_edge(clk) then
 if state = -1 then
elsif rising_edge(clk) then
 if state = -1 then
elsif rising_edge(clk) then
 if state = -1 then
elsif rising_edge(clk) then
 if state = -1 then
elsif rising_edge(clk) then
 if state = -1 then
elsif rising_edge(clk) then
 if state = -1 then
elsif rising_edge(clk) then
 if state = -1 then
elsif rising_edge(clk) then
 if state = NaN then
elsif rising_edge(clk) then
 if state = -1 then
elsif rising_edge(clk) then
 if state = -1 then
elsif rising_edge(clk) then
 if state = -1 then
elsif rising_edge(clk) then
 if state = -1 then
elsif rising_edge(clk) then
 if state = NaN then
elsif rising_edge(clk) then
 if state = NaN then
elsif rising_edge(clk) then
 if state = 1 then
elsif rising_edge(clk) then
 if state = 1 then
elsif rising_edge(clk) then
 if state = 3 then
elsif rising_edge(clk) then
 if state = 21 then
elsif rising_edge(clk) then
 if state = -1 then
elsif rising_edge(clk) then
 if state = 43 then
elsif rising_edge(clk) then
 if state = 39 then
elsif rising_edge(clk) then
 if state = 45 then
elsif rising_edge(clk) then
 if state = 37 then
elsif rising_edge(clk) then
 if state = 41 then
elsif rising_edge(clk) then
 if state = 26 then
elsif rising_edge(clk) then
 if state = 46 then
elsif rising_edge(clk) then
 if state = 19 then
elsif rising_edge(clk) then
 if state = 5 then
elsif rising_edge(clk) then
 if state = 35 then
elsif rising_edge(clk) then
 if state = 7 then
elsif rising_edge(clk) then
 if state = 17 then
elsif rising_edge(clk) then
 if state = 11 then
elsif rising_edge(clk) then
 if state = 15 then
elsif rising_edge(clk) then
 if state = 13 then
elsif rising_edge(clk) then
 if state = 9 then
elsif rising_edge(clk) then
 if state = 4 then
elsif rising_edge(clk) then
 if state = 23 then
elsif rising_edge(clk) then
 if state = 25 then
elsif rising_edge(clk) then
 if state = 33 then
elsif rising_edge(clk) then
 if state = 31 then
elsif rising_edge(clk) then
 if state = 28 then
elsif rising_edge(clk) then
 if state = NaN then
elsif rising_edge(clk) then
 if state = -1 then
elsif rising_edge(clk) then
 if state = 14 then
elsif rising_edge(clk) then
 if state = 14 then
elsif rising_edge(clk) then
 if state = 14 then
elsif rising_edge(clk) then
 if state = 14 then
elsif rising_edge(clk) then
 if state = 14 then
elsif rising_edge(clk) then
 if state = 14 then
elsif rising_edge(clk) then
 if state = 14 then
elsif rising_edge(clk) then
 if state = 14 then
elsif rising_edge(clk) then
 if state = 14 then
elsif rising_edge(clk) then
 if state = -1 then
elsif rising_edge(clk) then
 if state = -1 then
elsif rising_edge(clk) then
 if state = 14 then
elsif rising_edge(clk) then
 if state = 14 then
elsif rising_edge(clk) then
 if state = 14 then
elsif rising_edge(clk) then
 if state = 14 then
elsif rising_edge(clk) then
 if state = 14 then
elsif rising_edge(clk) then
 if state = 14 then
elsif rising_edge(clk) then
 if state = 14 then
elsif rising_edge(clk) then
 if state = 14 then
elsif rising_edge(clk) then
 if state = 14 then
elsif rising_edge(clk) then
 if state = -1 then
elsif rising_edge(clk) then
 if state = 14 then
elsif rising_edge(clk) then
 if state = 14 then
elsif rising_edge(clk) then
 if state = 14 then
elsif rising_edge(clk) then
 if state = 14 then
elsif rising_edge(clk) then
 if state = -1 then
elsif rising_edge(clk) then
 if state = NaN then
elsif rising_edge(clk) then
 if state = -1 then
elsif rising_edge(clk) then
 if state = 7 then
elsif rising_edge(clk) then
 if state = 7 then
elsif rising_edge(clk) then
 if state = 7 then
elsif rising_edge(clk) then
 if state = 7 then
elsif rising_edge(clk) then
 if state = 7 then
elsif rising_edge(clk) then
 if state = 7 then
elsif rising_edge(clk) then
 if state = 7 then
elsif rising_edge(clk) then
 if state = 7 then
elsif rising_edge(clk) then
 if state = 7 then
elsif rising_edge(clk) then
 if state = -1 then
elsif rising_edge(clk) then
 if state = -1 then
elsif rising_edge(clk) then
 if state = 7 then
elsif rising_edge(clk) then
 if state = 7 then
elsif rising_edge(clk) then
 if state = 7 then
elsif rising_edge(clk) then
 if state = 7 then
elsif rising_edge(clk) then
 if state = 7 then
elsif rising_edge(clk) then
 if state = 7 then
elsif rising_edge(clk) then
 if state = 7 then
elsif rising_edge(clk) then
 if state = 7 then
elsif rising_edge(clk) then
 if state = 7 then
elsif rising_edge(clk) then
 if state = -1 then
elsif rising_edge(clk) then
 if state = 7 then
elsif rising_edge(clk) then
 if state = 7 then
elsif rising_edge(clk) then
 if state = 7 then
elsif rising_edge(clk) then
 if state = 7 then
elsif rising_edge(clk) then
 if state = -1 then
state <= 0;
else
 state <= state +1;
end if;
end if;
end process;
end generated;
